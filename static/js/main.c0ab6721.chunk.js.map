{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Panel","this","props","img","title","src","alt","React","Component","NavBar","onClick","App","state","images","Array","fill","index","initialIndex","finalIndex","loading","console","log","setState","proxyUrl","currentIndex","urlArray","i","createUrl","concat","push","proxiedRequest","url","options","fetch","headers","then","res","json","catch","error","data","finalPlaceholder","num","dataArray","useUrl","className","input","newState","retrieveImages","logo","renderPanels","navigate","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c0ab6721.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\n\nclass Panel extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>{this.props.img.title}</h2>\n        <figure>\n          <img \n          src={this.props.img.img} \n          alt={this.props.img.alt}\n          />\n        </figure>\n      </div>\n    );\n  }\n}\n\nclass NavBar extends React.Component {\n  render() {\n    return(\n      <nav>\n        <button\n          onClick={() => this.props.onClick('first')}\n        >\n          First\n        </button>\n        <button\n          onClick={() => this.props.onClick('previous')}\n        >\n          Previous\n        </button>\n        <button\n          onClick={() => this.props.onClick('next')}\n        >\n          Next\n        </button>\n        <button\n          onClick={() => this.props.onClick('last')}\n        >\n          Last\n        </button>\n      </nav>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: Array(3).fill(''),\n      index: 1,\n      initialIndex: 1,\n      finalIndex: 0,\n      loading: true,\n    };\n  }\n  async retrieveImages(index) {\n    {/* Retrieves images from XKCD using open cors-anywhere proxy */}\n    console.log(index);\n    this.setState({ loading: true });\n    this.setState({ images: Array(3).fill('')});\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com';\n    const urlBase = 'http://xkcd.com/';\n    const urlEnd = '/info.0.json';\n    const currentUrl = 'http://xkcd.com/info.0.json'\n    let currentIndex = index;\n    let urlArray = [];\n    for (let i = 0; i < 3; i++) {\n      let createUrl = urlBase.concat(currentIndex).concat(urlEnd);\n      urlArray.push(createUrl);\n      currentIndex++;\n    }\n    const proxiedRequest = (url, options = {}) =>\n      fetch(`${proxyUrl}/${url}`, {\n        ...options,\n        headers: {\n          ...options.headers,\n          'X-Requested-With': 'xkcd-slideshow',\n        },\n      })\n      .then(res => res.json())\n      .catch(error => console.error(error))\n    if (this.state.finalIndex == 0) {\n      await proxiedRequest(currentUrl)\n        .then((data) => {\n          let finalPlaceholder = data.num - 2;\n          this.setState({ finalIndex : finalPlaceholder });\n        })\n        .catch(error => console.error(error))\n    }\n    let dataArray = [];\n    for (let useUrl of urlArray) {\n      await proxiedRequest(useUrl)\n        .then((data) => {\n          dataArray.push(data);\n        })\n        .catch(error => console.error(error))\n    }\n    this.setState({ images: dataArray});\n    this.setState({ loading: false });\n  }\n  renderPanels(i) {\n    return (\n      <Panel\n        img={this.state.images[i]}\n        className=\"panel\"\n      />\n    );\n  }\n  navigate(input) {\n    let step = 3;\n    let newState = 1;\n    switch(input) {\n      case 'first':\n        newState = this.state.initialIndex;\n        break;\n      case 'previous':\n        newState = this.state.index - step;\n        if ( newState < this.state.initialIndex ) {\n          newState = this.state.initialIndex;\n        }\n        break;\n      case 'next':\n        newState = this.state.index + step;\n        if ( newState > this.state.finalIndex ) {\n          newState = this.state.finalIndex;\n        }\n        break;\n      case 'last':\n          newState = this.state.finalIndex;\n        break;\n      default:\n        console.log(\"Navigation error.\");\n    }\n    this.retrieveImages(newState);\n    this.setState({ index: newState});\n  }\n  componentDidMount() {\n    this.retrieveImages(this.state.index);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>XKCD Slideshow App</h1>\n        </header>\n        {this.state.loading ? (\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        ) : (\n          <main className=\"slideshow\">\n            {this.renderPanels(0)}\n            {this.renderPanels(1)}\n            {this.renderPanels(2)}\n          </main>\n        ) }\n        <footer className=\"nav-footer\">\n          <NavBar\n            onClick={i => this.navigate(i)}\n          />\n          <section className=\"credit\">\n            <p>\n              Sincere thanks to <a href=\"https://xkcd.com\">Randlal Munroe over at XKCD</a> for making such an awesome webcomic.\n            </p>\n          </section>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}